#!/usr/bin/python2.6
# Copyright 2010 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Generated event descriptor file for a MOF event class.

DO NOT EDIT. This is an ETW event descriptor file generated by
sawbuck/py/etw/generate_descriptor.py. It contains event descriptions for
MOF GUID {2cb15d1d-5fc1-11d2-abe1-00a0c911f518}.
"""


from etw.descriptors import event
from etw.descriptors import field


class Event(object):
  GUID = '{e59bfe42-2294-44c9-8fd0-b6fd0fdb21ff}'
  DispatchBegin = (GUID, 10)
  DispatchEnd = (GUID, 11)
  DispatchDiscard = (GUID, 12)
  CreateMeasurement = (GUID, 13)
  ReceiveMeasurement = (GUID, 14)
  VisionGpuUpload = (GUID, 15)
  VisionGpuDownload = (GUID, 16)
  VisionAllocateGpu = (GUID, 17)
  VisionAllocateCpu = (GUID, 18)



class UTEventQueue(event.EventCategory):
  GUID = Event.GUID
  VERSION = 0

  class DispatchBegin(event.EventClass):
    _event_types_ = [Event.DispatchBegin]
    _fields_ = [('EventDomain', field.UInt32),
                ('Priority', field.UInt64),
                ('ComponentName', field.String),
                ('PortName', field.String)]

  class DispatchEnd(event.EventClass):
    _event_types_ = [Event.DispatchEnd]
    _fields_ = [('EventDomain', field.UInt32),
                ('Priority', field.UInt64),
                ('ComponentName', field.String),
                ('PortName', field.String),
                ('Duration', field.Float)]

  class DispatchDiscard(event.EventClass):
    _event_types_ = [Event.DispatchDiscard]
    _fields_ = [('EventDomain', field.UInt32),
                ('Priority', field.UInt64),
                ('ComponentName', field.String),
                ('PortName', field.String)]

  class CreateMeasurement(event.EventClass):
    _event_types_ = [Event.CreateMeasurement]
    _fields_ = [('EventDomain', field.UInt32),
                ('Priority', field.UInt64),
                ('ComponentName', field.String),
                ('PortName', field.String),
                ('Text', field.String)]

  class ReceiveMeasurement(event.EventClass):
    _event_types_ = [Event.ReceiveMeasurement]
    _fields_ = [('EventDomain', field.UInt32),
                ('Priority', field.UInt64),
                ('ComponentName', field.String),
                ('PortName', field.String),
                ('Text', field.String)]

  class VisionGpuUpload(event.EventClass):
    _event_types_ = [Event.VisionGpuUpload]
    _fields_ = [('Size', field.UInt64)]

  class VisionGpuDownload(event.EventClass):
    _event_types_ = [Event.VisionGpuDownload]
    _fields_ = [('Size', field.UInt64)]

  class VisionAllocateGpu(event.EventClass):
    _event_types_ = [Event.VisionAllocateGpu]
    _fields_ = [('Size', field.UInt64)]

  class VisionAllocateCpu(event.EventClass):
    _event_types_ = [Event.VisionAllocateCpu]
    _fields_ = [('Size', field.UInt64)]
